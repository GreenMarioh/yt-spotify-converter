{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mohni\\\\Desktop\\\\Playlist Converter\\\\playlist-converter-v3\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const backendUri = 'http://localhost:8888';\n  const [spotifyToken, setSpotifyToken] = useState('');\n  const [youtubeToken, setYoutubeToken] = useState('');\n\n  // --- NEW STATE for refresh token ---\n  const [youtubeRefreshToken, setYoutubeRefreshToken] = useState('');\n  const [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n  const [youtubePlaylists, setYoutubePlaylists] = useState([]);\n  useEffect(() => {\n    // Load tokens from localStorage\n    const storedSpotifyToken = localStorage.getItem('spotify_token');\n    if (storedSpotifyToken) setSpotifyToken(storedSpotifyToken);\n    const storedYoutubeToken = localStorage.getItem('youtube_token');\n    if (storedYoutubeToken) setYoutubeToken(storedYoutubeToken);\n\n    // --- NEW: Load YouTube refresh token from localStorage ---\n    const storedYoutubeRefreshToken = localStorage.getItem('youtube_refresh_token');\n    if (storedYoutubeRefreshToken) setYoutubeRefreshToken(storedYoutubeRefreshToken);\n\n    // Check for new tokens in the URL\n    const params = new URLSearchParams(window.location.search);\n    const spotify_token = params.get('spotify_access_token');\n    const youtube_token = params.get('youtube_access_token');\n\n    // --- NEW: Check for YouTube refresh token in URL ---\n    const youtube_refresh_token = params.get('youtube_refresh_token');\n    if (spotify_token) {\n      localStorage.setItem('spotify_token', spotify_token);\n      setSpotifyToken(spotify_token);\n      window.history.pushState({}, null, \"/\");\n    }\n    if (youtube_token) {\n      localStorage.setItem('youtube_token', youtube_token);\n      setYoutubeToken(youtube_token);\n\n      // --- NEW: Save YouTube refresh token ---\n      if (youtube_refresh_token) {\n        localStorage.setItem('youtube_refresh_token', youtube_refresh_token);\n        setYoutubeRefreshToken(youtube_refresh_token);\n      }\n      window.history.pushState({}, null, \"/\");\n    }\n  }, []);\n  const logout = () => {\n    setSpotifyToken('');\n    setYoutubeToken('');\n    setYoutubeRefreshToken(''); // NEW\n    setSpotifyPlaylists([]);\n    setYoutubePlaylists([]);\n    localStorage.removeItem('spotify_token');\n    localStorage.removeItem('youtube_token');\n    localStorage.removeItem('youtube_refresh_token'); // NEW\n  };\n\n  // --- MODIFIED fetchYoutubePlaylists function ---\n  const fetchYoutubePlaylists = async () => {\n    if (!youtubeToken) return;\n    try {\n      const {\n        data\n      } = await axios.get(`${backendUri}/youtube/playlists`, {\n        headers: {\n          'Authorization': `Bearer ${youtubeToken}`\n        }\n      });\n      setYoutubePlaylists(data.items);\n    } catch (error) {\n      // If the token is expired (usually a 401 or 403 error from Google)\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n        console.log('YouTube token expired, attempting to refresh...');\n        try {\n          const {\n            data\n          } = await axios.post(`${backendUri}/refresh/youtube`, {\n            refresh_token: youtubeRefreshToken\n          });\n          const newAccessToken = data.access_token;\n          setYoutubeToken(newAccessToken);\n          localStorage.setItem('youtube_token', newAccessToken);\n\n          // Retry fetching playlists with the new token\n          const refreshedResponse = await axios.get(`${backendUri}/youtube/playlists`, {\n            headers: {\n              'Authorization': `Bearer ${newAccessToken}`\n            }\n          });\n          setYoutubePlaylists(refreshedResponse.data.items);\n        } catch (refreshError) {\n          alert('Could not refresh your YouTube session. Please connect again.');\n          logout();\n        }\n      } else {\n        console.error('Error fetching YouTube playlists:', error);\n        alert('An error occurred while fetching YouTube playlists.');\n        logout();\n      }\n    }\n  };\n\n  // Keep your other functions (fetchSpotifyPlaylists, convertPlaylist, etc.) here\n  const fetchSpotifyPlaylists = async () => {/* ... existing code ... */};\n  const convertPlaylist = async playlist => {/* ... existing code ... */};\n  const convertYoutubePlaylist = async playlist => {/* ... existing code ... */};\n\n  // The return (...) JSX part of your component stays the same\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [\" \", \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 14\n  }, this);\n}\n_s(App, \"ZTsB3qacY+aDBh+GG48afpfoY98=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","backendUri","spotifyToken","setSpotifyToken","youtubeToken","setYoutubeToken","youtubeRefreshToken","setYoutubeRefreshToken","spotifyPlaylists","setSpotifyPlaylists","youtubePlaylists","setYoutubePlaylists","storedSpotifyToken","localStorage","getItem","storedYoutubeToken","storedYoutubeRefreshToken","params","URLSearchParams","window","location","search","spotify_token","get","youtube_token","youtube_refresh_token","setItem","history","pushState","logout","removeItem","fetchYoutubePlaylists","data","headers","items","error","response","status","console","log","post","refresh_token","newAccessToken","access_token","refreshedResponse","refreshError","alert","fetchSpotifyPlaylists","convertPlaylist","playlist","convertYoutubePlaylist","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mohni/Desktop/Playlist Converter/playlist-converter-v3/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n    const backendUri = 'http://localhost:8888';\n\n    const [spotifyToken, setSpotifyToken] = useState('');\n    const [youtubeToken, setYoutubeToken] = useState('');\n\n    // --- NEW STATE for refresh token ---\n    const [youtubeRefreshToken, setYoutubeRefreshToken] = useState('');\n\n    const [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n    const [youtubePlaylists, setYoutubePlaylists] = useState([]);\n\n    useEffect(() => {\n        // Load tokens from localStorage\n        const storedSpotifyToken = localStorage.getItem('spotify_token');\n        if (storedSpotifyToken) setSpotifyToken(storedSpotifyToken);\n\n        const storedYoutubeToken = localStorage.getItem('youtube_token');\n        if (storedYoutubeToken) setYoutubeToken(storedYoutubeToken);\n\n        // --- NEW: Load YouTube refresh token from localStorage ---\n        const storedYoutubeRefreshToken = localStorage.getItem('youtube_refresh_token');\n        if (storedYoutubeRefreshToken) setYoutubeRefreshToken(storedYoutubeRefreshToken);\n\n\n        // Check for new tokens in the URL\n        const params = new URLSearchParams(window.location.search);\n        const spotify_token = params.get('spotify_access_token');\n        const youtube_token = params.get('youtube_access_token');\n\n        // --- NEW: Check for YouTube refresh token in URL ---\n        const youtube_refresh_token = params.get('youtube_refresh_token');\n\n        if (spotify_token) {\n            localStorage.setItem('spotify_token', spotify_token);\n            setSpotifyToken(spotify_token);\n            window.history.pushState({}, null, \"/\");\n        }\n        if (youtube_token) {\n            localStorage.setItem('youtube_token', youtube_token);\n            setYoutubeToken(youtube_token);\n\n            // --- NEW: Save YouTube refresh token ---\n            if (youtube_refresh_token) {\n                localStorage.setItem('youtube_refresh_token', youtube_refresh_token);\n                setYoutubeRefreshToken(youtube_refresh_token);\n            }\n            window.history.pushState({}, null, \"/\");\n        }\n    }, []);\n\n    const logout = () => {\n        setSpotifyToken('');\n        setYoutubeToken('');\n        setYoutubeRefreshToken(''); // NEW\n        setSpotifyPlaylists([]);\n        setYoutubePlaylists([]);\n        localStorage.removeItem('spotify_token');\n        localStorage.removeItem('youtube_token');\n        localStorage.removeItem('youtube_refresh_token'); // NEW\n    };\n\n    // --- MODIFIED fetchYoutubePlaylists function ---\n    const fetchYoutubePlaylists = async () => {\n        if (!youtubeToken) return;\n        try {\n            const { data } = await axios.get(`${backendUri}/youtube/playlists`, {\n                headers: { 'Authorization': `Bearer ${youtubeToken}` }\n            });\n            setYoutubePlaylists(data.items);\n        } catch (error) {\n            // If the token is expired (usually a 401 or 403 error from Google)\n            if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n                console.log('YouTube token expired, attempting to refresh...');\n                try {\n                    const { data } = await axios.post(`${backendUri}/refresh/youtube`, {\n                        refresh_token: youtubeRefreshToken\n                    });\n                    \n                    const newAccessToken = data.access_token;\n                    setYoutubeToken(newAccessToken);\n                    localStorage.setItem('youtube_token', newAccessToken);\n\n                    // Retry fetching playlists with the new token\n                    const refreshedResponse = await axios.get(`${backendUri}/youtube/playlists`, {\n                        headers: { 'Authorization': `Bearer ${newAccessToken}` }\n                    });\n                    setYoutubePlaylists(refreshedResponse.data.items);\n\n                } catch (refreshError) {\n                    alert('Could not refresh your YouTube session. Please connect again.');\n                    logout();\n                }\n            } else {\n                console.error('Error fetching YouTube playlists:', error);\n                alert('An error occurred while fetching YouTube playlists.');\n                logout();\n            }\n        }\n    };\n\n    // Keep your other functions (fetchSpotifyPlaylists, convertPlaylist, etc.) here\n    const fetchSpotifyPlaylists = async () => { /* ... existing code ... */ };\n    const convertPlaylist = async (playlist) => { /* ... existing code ... */ };\n    const convertYoutubePlaylist = async (playlist) => { /* ... existing code ... */ };\n\n\n    // The return (...) JSX part of your component stays the same\n    return ( <div className=\"App\"> {/* ... your existing UI ... */} </div> );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}