{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mohni\\\\Desktop\\\\Playlist Converter\\\\playlist-converter-v3\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const backendUri = 'http://localhost:8888';\n  const [spotifyToken, setSpotifyToken] = useState('');\n  const [youtubeToken, setYoutubeToken] = useState('');\n  const [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n  const [youtubePlaylists, setYoutubePlaylists] = useState([]);\n\n  // **MODIFIED useEffect to use localStorage**\n  useEffect(() => {\n    // 1. Load any tokens stored in localStorage\n    const storedSpotifyToken = localStorage.getItem('spotify_token');\n    if (storedSpotifyToken) {\n      setSpotifyToken(storedSpotifyToken);\n    }\n    const storedYoutubeToken = localStorage.getItem('youtube_token');\n    if (storedYoutubeToken) {\n      setYoutubeToken(storedYoutubeToken);\n    }\n\n    // 2. Check for new tokens in the URL after redirect\n    const params = new URLSearchParams(window.location.search);\n    const spotify_token = params.get('spotify_access_token');\n    const youtube_token = params.get('youtube_access_token');\n\n    // 3. If a new token is found, save it to localStorage and update state\n    if (spotify_token) {\n      localStorage.setItem('spotify_token', spotify_token);\n      setSpotifyToken(spotify_token);\n      window.history.pushState({}, null, \"/\"); // Clean up URL\n    }\n    if (youtube_token) {\n      localStorage.setItem('youtube_token', youtube_token);\n      setYoutubeToken(youtube_token);\n      window.history.pushState({}, null, \"/\"); // Clean up URL\n    }\n  }, []);\n  const logout = () => {\n    // Clear state and localStorage\n    setSpotifyToken('');\n    setYoutubeToken('');\n    setSpotifyPlaylists([]);\n    setYoutubePlaylists([]);\n    localStorage.removeItem('spotify_token');\n    localStorage.removeItem('youtube_token');\n  };\n\n  // ... (keep the fetchSpotifyPlaylists, fetchYoutubePlaylists, and conversion functions as they are)\n  const fetchSpotifyPlaylists = async () => {/* ... existing code ... */};\n  const fetchYoutubePlaylists = async () => {/* ... existing code ... */};\n  const convertPlaylist = async playlist => {/* ... existing code ... */};\n  const convertYoutubePlaylist = async playlist => {/* ... existing code ... */};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Playlist Converter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), (spotifyToken || youtubeToken) && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-button\",\n        onClick: logout,\n        children: \"Logout / Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connections\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlists-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0acFfSoq8Fworo3rDf2MgxCZxDg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","backendUri","spotifyToken","setSpotifyToken","youtubeToken","setYoutubeToken","spotifyPlaylists","setSpotifyPlaylists","youtubePlaylists","setYoutubePlaylists","storedSpotifyToken","localStorage","getItem","storedYoutubeToken","params","URLSearchParams","window","location","search","spotify_token","get","youtube_token","setItem","history","pushState","logout","removeItem","fetchSpotifyPlaylists","fetchYoutubePlaylists","convertPlaylist","playlist","convertYoutubePlaylist","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mohni/Desktop/Playlist Converter/playlist-converter-v3/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  const backendUri = 'http://localhost:8888';\n\n  const [spotifyToken, setSpotifyToken] = useState('');\n  const [youtubeToken, setYoutubeToken] = useState('');\n\n  const [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n  const [youtubePlaylists, setYoutubePlaylists] = useState([]);\n\n  // **MODIFIED useEffect to use localStorage**\n  useEffect(() => {\n    // 1. Load any tokens stored in localStorage\n    const storedSpotifyToken = localStorage.getItem('spotify_token');\n    if (storedSpotifyToken) {\n      setSpotifyToken(storedSpotifyToken);\n    }\n    const storedYoutubeToken = localStorage.getItem('youtube_token');\n    if (storedYoutubeToken) {\n      setYoutubeToken(storedYoutubeToken);\n    }\n\n    // 2. Check for new tokens in the URL after redirect\n    const params = new URLSearchParams(window.location.search);\n    const spotify_token = params.get('spotify_access_token');\n    const youtube_token = params.get('youtube_access_token');\n\n    // 3. If a new token is found, save it to localStorage and update state\n    if (spotify_token) {\n      localStorage.setItem('spotify_token', spotify_token);\n      setSpotifyToken(spotify_token);\n      window.history.pushState({}, null, \"/\"); // Clean up URL\n    }\n    if (youtube_token) {\n      localStorage.setItem('youtube_token', youtube_token);\n      setYoutubeToken(youtube_token);\n      window.history.pushState({}, null, \"/\"); // Clean up URL\n    }\n  }, []);\n\n  const logout = () => {\n    // Clear state and localStorage\n    setSpotifyToken('');\n    setYoutubeToken('');\n    setSpotifyPlaylists([]);\n    setYoutubePlaylists([]);\n    localStorage.removeItem('spotify_token');\n    localStorage.removeItem('youtube_token');\n  };\n\n  // ... (keep the fetchSpotifyPlaylists, fetchYoutubePlaylists, and conversion functions as they are)\n  const fetchSpotifyPlaylists = async () => { /* ... existing code ... */ };\n  const fetchYoutubePlaylists = async () => { /* ... existing code ... */ };\n  const convertPlaylist = async (playlist) => { /* ... existing code ... */ };\n  const convertYoutubePlaylist = async (playlist) => { /* ... existing code ... */ };\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Playlist Converter</h1>\n        {(spotifyToken || youtubeToken) && (\n            <button className=\"logout-button\" onClick={logout}>\n                Logout / Reset\n            </button>\n        )}\n        <div className=\"connections\">\n          {/* ... existing connection boxes ... */}\n          {/* Your existing Spotify and YouTube connection boxes go here, they will work correctly with the new state logic */}\n        </div>\n        <div className=\"playlists-container\">\n          {/* ... existing playlist containers ... */}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}