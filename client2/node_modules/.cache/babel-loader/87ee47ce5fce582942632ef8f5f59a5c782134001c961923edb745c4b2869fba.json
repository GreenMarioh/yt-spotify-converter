{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mohni\\\\Desktop\\\\Playlist Converter\\\\yt-spotify-converter\\\\client2\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const backendUri = 'http://localhost:8888';\n  const [spotifyToken, setSpotifyToken] = useState('');\n  const [youtubeToken, setYoutubeToken] = useState('');\n  const [youtubeRefreshToken, setYoutubeRefreshToken] = useState('');\n  const [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n  const [youtubePlaylists, setYoutubePlaylists] = useState([]);\n  useEffect(() => {\n    const storedSpotifyToken = localStorage.getItem('spotify_token');\n    if (storedSpotifyToken) setSpotifyToken(storedSpotifyToken);\n    const storedYoutubeToken = localStorage.getItem('youtube_token');\n    if (storedYoutubeToken) setYoutubeToken(storedYoutubeToken);\n    const storedYoutubeRefreshToken = localStorage.getItem('youtube_refresh_token');\n    if (storedYoutubeRefreshToken) setYoutubeRefreshToken(storedYoutubeRefreshToken);\n    const params = new URLSearchParams(window.location.search);\n    const spotify_token = params.get('spotify_access_token');\n    const youtube_token = params.get('youtube_access_token');\n    const youtube_refresh_token = params.get('youtube_refresh_token');\n    if (spotify_token) {\n      localStorage.setItem('spotify_token', spotify_token);\n      setSpotifyToken(spotify_token);\n      window.history.pushState({}, null, \"/\");\n    }\n    if (youtube_token) {\n      localStorage.setItem('youtube_token', youtube_token);\n      setYoutubeToken(youtube_token);\n      if (youtube_refresh_token) {\n        localStorage.setItem('youtube_refresh_token', youtube_refresh_token);\n        setYoutubeRefreshToken(youtube_refresh_token);\n      }\n      window.history.pushState({}, null, \"/\");\n    }\n  }, []);\n  const logout = () => {\n    setSpotifyToken('');\n    setYoutubeToken('');\n    setYoutubeRefreshToken('');\n    setSpotifyPlaylists([]);\n    setYoutubePlaylists([]);\n    localStorage.removeItem('spotify_token');\n    localStorage.removeItem('youtube_token');\n    localStorage.removeItem('youtube_refresh_token');\n  };\n  const fetchSpotifyPlaylists = async () => {\n    if (!spotifyToken) return;\n    try {\n      const {\n        data\n      } = await axios.get(`${backendUri}/spotify/playlists`, {\n        headers: {\n          'Authorization': `Bearer ${spotifyToken}`\n        }\n      });\n      setSpotifyPlaylists(data.items);\n    } catch (error) {\n      console.error('Error fetching Spotify playlists:', error);\n      alert('Could not fetch Spotify playlists. Your token might have expired. Please connect again.');\n      // NOTE: We would add Spotify refresh logic here, similar to YouTube's.\n      logout();\n    }\n  };\n  const fetchYoutubePlaylists = async () => {\n    if (!youtubeToken) return;\n    try {\n      const {\n        data\n      } = await axios.get(`${backendUri}/youtube/playlists`, {\n        headers: {\n          'Authorization': `Bearer ${youtubeToken}`\n        }\n      });\n      setYoutubePlaylists(data.items);\n    } catch (error) {\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n        console.log('YouTube token expired, attempting to refresh...');\n        try {\n          const {\n            data\n          } = await axios.post(`${backendUri}/refresh/youtube`, {\n            refresh_token: youtubeRefreshToken\n          });\n          const newAccessToken = data.access_token;\n          setYoutubeToken(newAccessToken);\n          localStorage.setItem('youtube_token', newAccessToken);\n          const refreshedResponse = await axios.get(`${backendUri}/youtube/playlists`, {\n            headers: {\n              'Authorization': `Bearer ${newAccessToken}`\n            }\n          });\n          setYoutubePlaylists(refreshedResponse.data.items);\n        } catch (refreshError) {\n          alert('Could not refresh your YouTube session. Please connect again.');\n          logout();\n        }\n      } else {\n        console.error('Error fetching YouTube playlists:', error);\n        alert('An error occurred while fetching YouTube playlists.');\n        logout();\n      }\n    }\n  };\n  const convertPlaylist = async playlist => {\n    if (!youtubeToken) {\n      alert('Please connect to YouTube first!');\n      return;\n    }\n    const newPlaylistName = `${playlist.name} (from Spotify)`;\n    alert(`Starting conversion for \"${playlist.name}\". This may take a moment...`);\n    try {\n      await axios.post(`${backendUri}/convert/spotify-to-youtube`, {\n        spotifyToken: spotifyToken,\n        youtubeToken: youtubeToken,\n        spotifyPlaylistId: playlist.id,\n        newYoutubePlaylistName: newPlaylistName\n      });\n      alert(`Successfully converted \"${playlist.name}\"! Check your YouTube account.`);\n    } catch (error) {\n      console.error('Conversion failed:', error);\n      alert('An error occurred during conversion.');\n    }\n  };\n  const convertYoutubePlaylist = async playlist => {\n    if (!spotifyToken) {\n      alert('Please connect to Spotify first!');\n      return;\n    }\n    const newPlaylistName = `${playlist.snippet.title} (from YouTube)`;\n    alert(`Starting conversion for \"${playlist.snippet.title}\". This may take a moment...`);\n    try {\n      await axios.post(`${backendUri}/convert/youtube-to-spotify`, {\n        youtubeToken: youtubeToken,\n        spotifyToken: spotifyToken,\n        youtubePlaylistId: playlist.id,\n        newSpotifyPlaylistName: newPlaylistName\n      });\n      alert(`Successfully converted \"${playlist.snippet.title}\"! Check your Spotify account.`);\n    } catch (error) {\n      console.error('Conversion failed:', error);\n      alert('An error occurred during conversion.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Playlist Converter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), (spotifyToken || youtubeToken) && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-button\",\n        onClick: logout,\n        children: \"Logout / Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connections\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"connection-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Spotify\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), !spotifyToken ? /*#__PURE__*/_jsxDEV(\"a\", {\n            className: \"login-button spotify\",\n            href: `${backendUri}/login/spotify`,\n            children: \"Connect with Spotify\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"connected-text\",\n              children: \"\\u2705 Connected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"fetch-button\",\n              onClick: fetchSpotifyPlaylists,\n              children: \"Fetch Playlists\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"connection-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"YouTube\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this), !youtubeToken ? /*#__PURE__*/_jsxDEV(\"a\", {\n            className: \"login-button youtube\",\n            href: `${backendUri}/login/youtube`,\n            children: \"Connect with YouTube\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"connected-text\",\n              children: \"\\u2705 Connected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"fetch-button\",\n              onClick: fetchYoutubePlaylists,\n              children: \"Fetch Playlists\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlists-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playlist-column\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Your Spotify Playlists\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: spotifyPlaylists.map(playlist => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"playlist-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: playlist.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"convert-button\",\n                onClick: () => convertPlaylist(playlist),\n                disabled: !youtubeToken,\n                children: \"Convert\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 19\n              }, this)]\n            }, playlist.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playlist-column\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Your YouTube Playlists\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: youtubePlaylists.map(playlist => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"playlist-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: playlist.snippet.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"convert-button\",\n                onClick: () => convertYoutubePlaylist(playlist),\n                disabled: !spotifyToken,\n                children: \"Convert\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 19\n              }, this)]\n            }, playlist.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ZTsB3qacY+aDBh+GG48afpfoY98=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","backendUri","spotifyToken","setSpotifyToken","youtubeToken","setYoutubeToken","youtubeRefreshToken","setYoutubeRefreshToken","spotifyPlaylists","setSpotifyPlaylists","youtubePlaylists","setYoutubePlaylists","storedSpotifyToken","localStorage","getItem","storedYoutubeToken","storedYoutubeRefreshToken","params","URLSearchParams","window","location","search","spotify_token","get","youtube_token","youtube_refresh_token","setItem","history","pushState","logout","removeItem","fetchSpotifyPlaylists","data","headers","items","error","console","alert","fetchYoutubePlaylists","response","status","log","post","refresh_token","newAccessToken","access_token","refreshedResponse","refreshError","convertPlaylist","playlist","newPlaylistName","name","spotifyPlaylistId","id","newYoutubePlaylistName","convertYoutubePlaylist","snippet","title","youtubePlaylistId","newSpotifyPlaylistName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","href","map","disabled","_c","$RefreshReg$"],"sources":["C:/Users/mohni/Desktop/Playlist Converter/yt-spotify-converter/client2/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  const backendUri = 'http://localhost:8888';\n\n  const [spotifyToken, setSpotifyToken] = useState('');\n  const [youtubeToken, setYoutubeToken] = useState('');\n  const [youtubeRefreshToken, setYoutubeRefreshToken] = useState('');\n\n  const [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n  const [youtubePlaylists, setYoutubePlaylists] = useState([]);\n\n  useEffect(() => {\n    const storedSpotifyToken = localStorage.getItem('spotify_token');\n    if (storedSpotifyToken) setSpotifyToken(storedSpotifyToken);\n\n    const storedYoutubeToken = localStorage.getItem('youtube_token');\n    if (storedYoutubeToken) setYoutubeToken(storedYoutubeToken);\n\n    const storedYoutubeRefreshToken = localStorage.getItem('youtube_refresh_token');\n    if (storedYoutubeRefreshToken) setYoutubeRefreshToken(storedYoutubeRefreshToken);\n\n    const params = new URLSearchParams(window.location.search);\n    const spotify_token = params.get('spotify_access_token');\n    const youtube_token = params.get('youtube_access_token');\n    const youtube_refresh_token = params.get('youtube_refresh_token');\n\n    if (spotify_token) {\n      localStorage.setItem('spotify_token', spotify_token);\n      setSpotifyToken(spotify_token);\n      window.history.pushState({}, null, \"/\");\n    }\n    if (youtube_token) {\n      localStorage.setItem('youtube_token', youtube_token);\n      setYoutubeToken(youtube_token);\n\n      if (youtube_refresh_token) {\n        localStorage.setItem('youtube_refresh_token', youtube_refresh_token);\n        setYoutubeRefreshToken(youtube_refresh_token);\n      }\n      window.history.pushState({}, null, \"/\");\n    }\n  }, []);\n\n  const logout = () => {\n    setSpotifyToken('');\n    setYoutubeToken('');\n    setYoutubeRefreshToken('');\n    setSpotifyPlaylists([]);\n    setYoutubePlaylists([]);\n    localStorage.removeItem('spotify_token');\n    localStorage.removeItem('youtube_token');\n    localStorage.removeItem('youtube_refresh_token');\n  };\n\n  const fetchSpotifyPlaylists = async () => {\n    if (!spotifyToken) return;\n    try {\n      const { data } = await axios.get(`${backendUri}/spotify/playlists`, {\n        headers: { 'Authorization': `Bearer ${spotifyToken}` }\n      });\n      setSpotifyPlaylists(data.items);\n    } catch (error) {\n      console.error('Error fetching Spotify playlists:', error);\n      alert('Could not fetch Spotify playlists. Your token might have expired. Please connect again.');\n      // NOTE: We would add Spotify refresh logic here, similar to YouTube's.\n      logout();\n    }\n  };\n\n  const fetchYoutubePlaylists = async () => {\n    if (!youtubeToken) return;\n    try {\n      const { data } = await axios.get(`${backendUri}/youtube/playlists`, {\n        headers: { 'Authorization': `Bearer ${youtubeToken}` }\n      });\n      setYoutubePlaylists(data.items);\n    } catch (error) {\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n        console.log('YouTube token expired, attempting to refresh...');\n        try {\n          const { data } = await axios.post(`${backendUri}/refresh/youtube`, {\n            refresh_token: youtubeRefreshToken\n          });\n\n          const newAccessToken = data.access_token;\n          setYoutubeToken(newAccessToken);\n          localStorage.setItem('youtube_token', newAccessToken);\n\n          const refreshedResponse = await axios.get(`${backendUri}/youtube/playlists`, {\n            headers: { 'Authorization': `Bearer ${newAccessToken}` }\n          });\n          setYoutubePlaylists(refreshedResponse.data.items);\n\n        } catch (refreshError) {\n          alert('Could not refresh your YouTube session. Please connect again.');\n          logout();\n        }\n      } else {\n        console.error('Error fetching YouTube playlists:', error);\n        alert('An error occurred while fetching YouTube playlists.');\n        logout();\n      }\n    }\n  };\n\n  const convertPlaylist = async (playlist) => {\n    if (!youtubeToken) {\n      alert('Please connect to YouTube first!');\n      return;\n    }\n    const newPlaylistName = `${playlist.name} (from Spotify)`;\n    alert(`Starting conversion for \"${playlist.name}\". This may take a moment...`);\n    try {\n      await axios.post(`${backendUri}/convert/spotify-to-youtube`, {\n        spotifyToken: spotifyToken,\n        youtubeToken: youtubeToken,\n        spotifyPlaylistId: playlist.id,\n        newYoutubePlaylistName: newPlaylistName,\n      });\n      alert(`Successfully converted \"${playlist.name}\"! Check your YouTube account.`);\n    } catch (error) {\n      console.error('Conversion failed:', error);\n      alert('An error occurred during conversion.');\n    }\n  };\n\n  const convertYoutubePlaylist = async (playlist) => {\n    if (!spotifyToken) {\n      alert('Please connect to Spotify first!');\n      return;\n    }\n    const newPlaylistName = `${playlist.snippet.title} (from YouTube)`;\n    alert(`Starting conversion for \"${playlist.snippet.title}\". This may take a moment...`);\n    try {\n      await axios.post(`${backendUri}/convert/youtube-to-spotify`, {\n        youtubeToken: youtubeToken,\n        spotifyToken: spotifyToken,\n        youtubePlaylistId: playlist.id,\n        newSpotifyPlaylistName: newPlaylistName,\n      });\n      alert(`Successfully converted \"${playlist.snippet.title}\"! Check your Spotify account.`);\n    } catch (error) {\n      console.error('Conversion failed:', error);\n      alert('An error occurred during conversion.');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Playlist Converter</h1>\n        {(spotifyToken || youtubeToken) && (\n          <button className=\"logout-button\" onClick={logout}>\n            Logout / Reset\n          </button>\n        )}\n        <div className=\"connections\">\n          <div className=\"connection-box\">\n            <h2>Spotify</h2>\n            {!spotifyToken ? (\n              <a className=\"login-button spotify\" href={`${backendUri}/login/spotify`}>\n                Connect with Spotify\n              </a>\n            ) : (\n              <div>\n                <p className=\"connected-text\">✅ Connected</p>\n                <button className=\"fetch-button\" onClick={fetchSpotifyPlaylists}>\n                  Fetch Playlists\n                </button>\n              </div>\n            )}\n          </div>\n\n          <div className=\"connection-box\">\n            <h2>YouTube</h2>\n            {!youtubeToken ? (\n              <a className=\"login-button youtube\" href={`${backendUri}/login/youtube`}>\n                Connect with YouTube\n              </a>\n            ) : (\n              <div>\n                <p className=\"connected-text\">✅ Connected</p>\n                <button className=\"fetch-button\" onClick={fetchYoutubePlaylists}>\n                  Fetch Playlists\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"playlists-container\">\n          <div className=\"playlist-column\">\n            <h3>Your Spotify Playlists</h3>\n            <ul>\n              {spotifyPlaylists.map(playlist => (\n                <li key={playlist.id} className=\"playlist-item\">\n                  <span>{playlist.name}</span>\n                  <button\n                    className=\"convert-button\"\n                    onClick={() => convertPlaylist(playlist)}\n                    disabled={!youtubeToken}\n                  >\n                    Convert\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"playlist-column\">\n            <h3>Your YouTube Playlists</h3>\n            <ul>\n              {youtubePlaylists.map(playlist => (\n                <li key={playlist.id} className=\"playlist-item\">\n                  <span>{playlist.snippet.title}</span>\n                  <button\n                    className=\"convert-button\"\n                    onClick={() => convertYoutubePlaylist(playlist)}\n                    disabled={!spotifyToken}\n                  >\n                    Convert\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}